- No Red-Red Violation: No red node has a red child.
- Black Height Consistency: Every path from a node to its descendant leaves must have the same number of black nodes.
- Root Property: The root node must be black.
- Size Consistency: The size attribute must match the number of nodes in the tree.
- BST Property: For any given node, all keys in the left subtree must be less than the node's key, and all keys in the right subtree must be greater than the node's key.


public boolean property() {
    return isBST(root, null, null);
}

private boolean isBST(Node node, K min, K max) {
    if (node == null) {
        return true;
    }
    if (min != null && compare(node.key, min) <= 0) {
        return false;
    }
    if (max != null && compare(node.key, max) >= 0) {
        return false;
    }
    return isBST(node.left, min, node.key) && isBST(node.right, node.key, max);
}

public boolean property() {
    return size == countNodes(root);
}

private int countNodes(Node node) {
    if (node == null) {
        return 0;
    }
    return 1 + countNodes(node.left) + countNodes(node.right);
}

public boolean property() {
    return root == null || root.color == BLACK;
}

public boolean property() {
    if (root == null) {
        return true;
    }
    int blackHeight = -1;
    java.util.Stack<Node> stack = new java.util.Stack<>();
    stack.push(root);
    java.util.Stack<Integer> heights = new java.util.Stack<>();
    heights.push(0);

    while (!stack.isEmpty()) {
        Node node = stack.pop();
        int currentHeight = heights.pop();

        if (node == null) {
            if (blackHeight == -1) {
                blackHeight = currentHeight;
            } else if (currentHeight != blackHeight) {
                return false;
            }
            continue;
        }

        int newHeight = currentHeight + (node.color == BLACK ? 1 : 0);
        stack.push(node.left);
        heights.push(newHeight);
        stack.push(node.right);
        heights.push(newHeight);
    }
    return true;
}

public boolean property() {
    return checkRedRedViolation(root);
}

private boolean checkRedRedViolation(Node node) {
    if (node == null) {
        return true;
    }
    if (node.color == RED) {
        if (node.left != null && node.left.color == RED) {
            return false;
        }
        if (node.right != null && node.right.color == RED) {
            return false;
        }
    }
    return checkRedRedViolation(node.left) && checkRedRedViolation(node.right);
}