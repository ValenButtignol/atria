
### Behavior
The NodeCachingLinkedList class is a linked list implementation that includes a caching mechanism to reuse nodes. It maintains a header node to simplify operations and a cache to store recently removed nodes. The class provides methods to add and remove elements, ensuring that the cache does not exceed a specified maximum size. The add method inserts a new element at the end of the list, while the remove method deletes an element by value. If the cache is full, the oldest cached node is discarded when a new node is added to the cache.

### Attributes
- header (LinkedListNode): A dummy node that serves as the starting point of the list.
- size (int): Tracks the number of elements in the list.
- DEFAULT_MAXIMUM_CACHE_SIZE (int): The default maximum size of the cache.
- firstCachedNode (LinkedListNode): The first node in the cache.
- cacheSize (int): Tracks the number of nodes currently in the cache.
- maximumCacheSize (int): The maximum number of nodes that the cache can hold.

### Properties
- Consistent size: The size attribute must be equal to the number of elements in the list.
- Linked structure: The list must maintain a doubly linked structure, where each node has references to its previous and next nodes.
- Cache management: The cache must not exceed the maximum cache size, and the oldest node should be discarded when the cache is full.
- Node reusability: Removed nodes should be added to the cache for reuse, reducing memory allocation overhead.
- Equality check: The isEqualValue method should correctly compare two objects, considering both null and non-null values.
