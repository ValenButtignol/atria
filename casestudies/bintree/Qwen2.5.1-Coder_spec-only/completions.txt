
- **Attributes:**
  - `root`: The root node of the binary search tree.
  - `size`: The number of nodes in the tree.

- **Methods:**
  - `add(int x)`: Adds an integer `x` to the binary search tree. If the tree is empty, `x` becomes the root. Otherwise, it is inserted in the correct position to maintain the binary search tree property. If `x` already exists in the tree, no action is taken.
  - `getSize()`: Returns the number of nodes in the tree.

- **Constraints:**
  - The tree maintains the binary search tree property: for any node, all values in its left subtree are less than its value, and all values in its right subtree are greater than its value.
  - Duplicates are not allowed in the tree.

To write the `repOK` method for the `BinTree` class, we need to ensure that the representation invariant holds true. The invariant for a binary search tree (BST) is that for every node, all values in its left subtree are less than its value, and all values in its right subtree are greater than its value. Additionally, duplicates are not allowed.

Here's how you can implement the `repOK` method in Java:

```java
public class BinTree {
    private Node root;
    private int size;

    // Node class representing each node in the binary search tree
    private class Node {
        int value;
        Node left;
        Node right;

        Node(int value) {
            this.value = value;
            this.left = null;
            this.right = null;
        }
    }

    // Method to add a value to the binary search tree
    public void add(int x) {
        if (root == null) {
            root = new Node(x);
            size++;
        } else {
            add(root, x);
        }
    }

    // Helper method to add a value to the tree
    private void add(Node node, int x) {
        if (x < node.value) {
            if (node.left == null) {
                node.left = new Node(x);
                size++;
            } else {
                add(node.left, x);
            }
        } else if (x > node.value) {
            if (node.right == null) {
                node.right = new Node(x);
                size++;
            } else {
                add(node.right, x);
            }
        }
        // If x == node.value, do nothing (no duplicates allowed)
    }

    // Method to get the size of the tree
    public int getSize() {
        return size;
    }

    // Representation invariant method
    public boolean repOK() {
        return repOK(root, Integer.MIN_VALUE, Integer.MAX_VALUE);
    }

    // Helper method to check the BST property recursively
    private boolean repOK(Node node, int min, int max) {
        if (node == null) {
            return true;
        }
        if (node.value <= min || node.value >= max) {
            return false;
        }
        return repOK(node.left, min, node.value) && repOK(node.right, node.value, max);
    }
}
```

### Explanation:
- **Node Class**: Represents each node in the binary search tree with a value and pointers to left and right children.
- **add Method**: Adds a new value to the tree while maintaining the BST property. If the tree is empty, the new value becomes the root. Otherwise, it is inserted in the correct position.
- **getSize Method**: Returns the number of nodes in the tree.
- **repOK Method**: Checks if the tree satisfies the BST property. It uses a helper method `repOK` that recursively checks each node to ensure that all values in its left subtree are less than its value and all values in its right subtree are greater than its value. The helper method also ensures that the values are within the valid range defined by `min` and `max`.
- **repOK Helper Method**: Recursively checks each node to ensure the BST property holds. It updates the `min` and `max` values as it traverses the tree to ensure that each node's value is within the correct range.
