
To write the `repOK` method for the `BinTree` class, we need to ensure that the representation invariant holds true. For a binary search tree (BST), the representation invariant typically includes the following conditions:

1. The left subtree of any node contains only nodes with values less than the node's value.
2. The right subtree of any node contains only nodes with values greater than the node's value.
3. There are no duplicate values in the tree.

Here's the `repOK` method for the `BinTree` class:

```java
public boolean repOK() {
    return repOK(root, Integer.MIN_VALUE, Integer.MAX_VALUE);
}

private boolean repOK(Node node, int min, int max) {
    if (node == null) {
        return true;
    }
    if (node.info <= min || node.info >= max) {
        return false;
    }
    return repOK(node.left, min, node.info) && repOK(node.right, node.info, max);
}
```

### Explanation:

1. **Base Case**: If the node is `null`, it means we've reached the end of a branch, and the subtree is valid, so we return `true`.

2. **Value Check**: For each node, we check if its value is within the valid range (`min` to `max`). If not, the tree is invalid, and we return `false`.

3. **Recursive Check**: We recursively check the left subtree with the updated maximum value (`node.info`) and the right subtree with the updated minimum value (`node.info`).

This `repOK` method ensures that the binary search tree properties are maintained throughout the tree.
