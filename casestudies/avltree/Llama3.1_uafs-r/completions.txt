
```java
public boolean repOK() {
    if (root == null) {
        return true;
    }

    int heightDiff = Math.abs(height(root.left) - height(root.right));
    if (heightDiff > ALLOWED_IMBALANCE) {
        return false;
    }

    if (heightDiff == ALLOWED_IMBALANCE) {
        if (height(root.left.left) >= height(root.left.right) && height(root.left.left) >= height(root.right)) {
            return false;
        }
        if (height(root.right.right) >= height(root.right.left) && height(root.right.right) >= height(root.left)) {
            return false;
        }
    }

    return repOK(root.left) && repOK(root.right);
}

private int height(AvlNode t) {
    return t == null ? -1 : t.height;
}
```
This representation invariant checks that the tree is balanced according to the AVL tree properties. It checks that the height difference between the left and right subtrees of the root is within the allowed imbalance, and that if the height difference is at the maximum allowed imbalance, the tree is still balanced according to the AVL tree properties. It also recursively checks that the left and right subtrees are also balanced.
