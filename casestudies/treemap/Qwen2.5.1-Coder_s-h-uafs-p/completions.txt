
- Red-Black Tree Property: Every node is either red or black.
- Root Property: The root node is always black.
- Nil Property: All leaf nodes (NIL nodes) are black.
- Children Property: If a node is red, then both its children are black.
- Depth Property: For each node, all paths from the node to descendant leaves contain the same number of black nodes.

```java
public boolean property() {
    return isRedBlackTree(root);
}

private boolean isRedBlackTree(Node node) {
    if (node == null) {
        return true;
    }
    if (node.color == RED && (node.left != null && node.left.color == RED || node.right != null && node.right.color == RED)) {
        return false;
    }
    return isRedBlackTree(node.left) && isRedBlackTree(node.right);
}
```

```java
public boolean property() {
    if (root == null) {
        return true;
    }
    return root.color == BLACK;
}
```

```java
public boolean property() {
    return checkNilProperty(root);
}

private boolean checkNilProperty(Node node) {
    if (node == null) {
        return true;
    }
    if (node.color == RED) {
        return false;
    }
    return checkNilProperty(node.left) && checkNilProperty(node.right);
}
```

```java
public boolean property() {
    return checkChildrenProperty(root);
}

private boolean checkChildrenProperty(Node node) {
    if (node == null) {
        return true;
    }
    if (node.color == RED) {
        if (node.left != null && node.left.color == RED) {
            return false;
        }
        if (node.right != null && node.right.color == RED) {
            return false;
        }
    }
    return checkChildrenProperty(node.left) && checkChildrenProperty(node.right);
}
```

```java
public boolean property() {
    return checkDepthProperty(root);
}

private boolean checkDepthProperty(Node node) {
    if (node == null) {
        return true;
    }
    if (node.color == BLACK) {
        return checkDepthProperty(node.left) && checkDepthProperty(node.right);
    }
    return checkDepthProperty(node.left) && checkDepthProperty(node.right);
}
```
